# Generated by Django 2.0.2 on 2018-02-21 22:03

import django.contrib.gis.db.models.fields
import django.contrib.postgres.fields.ranges
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('common', '0003_o2_mobility_properties_processes'),
    ]

    operations = [
        migrations.CreateModel(
            name='AdminUnit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('id_by_provider', models.CharField(editable=False, help_text='ID of the station used by provider.', max_length=50)),
                ('name', models.CharField(help_text='Human-readable name of the station.', max_length=50)),
                ('geometry', django.contrib.gis.db.models.fields.MultiPolygonField(help_text='Spatial information about feature.', srid=3857)),
                ('level', models.CharField(choices=[('0', 'Municipality'), ('1', 'District')], default='0', help_text='Municipality or district.', max_length=255)),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='EventCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(help_text='Type of an event.', max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='EventExtent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('admin_units', models.ManyToManyField(to='rsd.AdminUnit')),
            ],
        ),
        migrations.CreateModel(
            name='EventObservation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phenomenon_time_range', django.contrib.postgres.fields.ranges.DateTimeRangeField(help_text='Datetime range when the observation was captured.')),
                ('result_null_reason', models.CharField(default='', help_text='Reason why result is null.', max_length=100)),
                ('id_by_provider', models.TextField(help_text='Unique ID of an event.')),
                ('category', models.ForeignKey(editable=False, help_text='Type of an event.', on_delete=django.db.models.deletion.DO_NOTHING, to='rsd.EventCategory')),
                ('feature_of_interest', models.ForeignKey(editable=False, help_text='Admin units of Brno+Brno-venkov+D1', on_delete=django.db.models.deletion.DO_NOTHING, to='rsd.EventExtent')),
                ('observed_property', models.ForeignKey(editable=False, help_text='Phenomenon that was observed, e.g. air temperature.', on_delete=django.db.models.deletion.DO_NOTHING, related_name='rsd_eventobservation_related', to='common.Property')),
                ('procedure', models.ForeignKey(editable=False, help_text='Process used to generate the result, e.g. measurement or average.', on_delete=django.db.models.deletion.DO_NOTHING, related_name='rsd_eventobservation_related', to='common.Process')),
                ('related_observations', models.ManyToManyField(editable=False, help_text='Measured observations that were used to generate average observation, or vice versa.', related_name='_eventobservation_related_observations_+', to='rsd.EventObservation')),
                ('result', models.ForeignKey(editable=False, help_text='Admin units of the event', on_delete=django.db.models.deletion.DO_NOTHING, related_name='rsd_eventobservation_related', to='rsd.EventExtent')),
            ],
            options={
                'ordering': ['-phenomenon_time_range', 'feature_of_interest', 'procedure', 'observed_property'],
                'get_latest_by': 'phenomenon_time_range',
                'abstract': False,
            },
        ),
        migrations.AlterUniqueTogether(
            name='eventobservation',
            unique_together={('phenomenon_time_range', 'observed_property', 'feature_of_interest', 'procedure')},
        ),
    ]
